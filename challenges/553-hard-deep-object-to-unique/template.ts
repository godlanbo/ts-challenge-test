/**
 * {_?: [O, P]}
 * 题目要求新生成的对象是可以互相赋值的，但是却不能相等
 * 所以考虑生成可选属性，带有可选属性的两个对象，满足一定条件
 * 可以进行相互赋值：
 * { a?: 1, b: 2 }  { b: 2 }
 * 缺省可选属性，可以互相赋值，但却不能通过IsEqual的检测
 * 然后为了保证相同对象值不同，我们给对象值里面来一个
 * _?: [O, P] 这种，依赖原对象和键 的值，这样即使是同一个
 * 对象值，由于所处的键或者原对象不同，所以取值的时候也会导致不同，
 * 达到 unique 的效果
 */
type DeepObjectToUniq<O extends object> = {
  [P in keyof O]: O[P] extends object
    ? DeepObjectToUniq<O[P] & { _?: [O, P] }>
    : O[P]
}
